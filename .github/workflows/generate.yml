name: Generate ProtoBuf Files & Auto Tag

on:
  push:
    branches:
      - master
  workflow_dispatch:

jobs:
  generate:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Generator Repo
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: 1.22

      - name: Install Protobuf Compiler
        run: |
          sudo apt-get update
          sudo apt-get install -y protobuf-compiler

      - name: Install Go Protobuf Tools
        run: |
          go install google.golang.org/protobuf/cmd/protoc-gen-go@latest
          go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest

      - name: Clone Proto Files Repository
        run: |
          git clone https://github.com/shynggys9219/ap2-apis-user-service.git
          cd ap2-apis-user-service

      - name: Generate Go Code from Proto Files
        run: |
          cd ap2-apis-user-service
          mkdir -p ../generated
          # Find all .proto files and generate code
          find . -name "*.proto" -exec protoc --proto_path=. --go_out=../generated --go-grpc_out=../generated {} +

      - name: Copy Generated Files
        run: |
          mkdir -p generated
          cp -r ../generated/* ./generated

      - name: Commit & Push Generated Files
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --global user.name "shynggys9219"
          git config --global user.email "alshynggys@mail.ru"
          git add .
          git commit -m "Generated files from Protobufs"
          git push origin master

      - name: Get latest tag
        id: get_tag
        run: echo "::set-output name=tag::$(git describe --tags --abbrev=0 || echo 'v0.0.0')"

      - name: Determine next version
        id: next_version
        run: |
          current_version=${{ steps.get_tag.outputs.tag }}
          echo "Current version: $current_version"
          
          major=$(echo $current_version | cut -d '.' -f 1 | cut -d 'v' -f 2)
          minor=$(echo $current_version | cut -d '.' -f 2)
          patch=$(echo $current_version | cut -d '.' -f 3)
          
          new_major=$major
          new_minor=$minor
          new_patch=$((patch + 1))
          
          new_version="v$new_major.$new_minor.$new_patch"
          echo "::set-output name=new_version::$new_version"
          echo "New version: $new_version"

      - name: Create new tag
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git tag ${{ steps.next_version.outputs.new_version }}
          git push origin ${{ steps.next_version.outputs.new_version }}

      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.next_version.outputs.new_version }}
          release_name: Release ${{ steps.next_version.outputs.new_version }}
          body: "Automatically generated release."
          draft: false
          prerelease: false
